/************/
/*! Animate */

var animate = (function() {

    var easeFunction = cubicBezierDefined();
    var animatingClass = 'animating';

    // Animation

    /*
     *      Func: animateHeight
     *      Desc: Animate the height of an item
     *      Args: @el - HTML Element - The HTML element to animate
     *               @settingsObj - Object - Contains properties to override default settings
     */
    function animateHeight(el, settingsObj) {

        // Set defaults and overwrite with passed object (settingsObj)
        var s = Object.assign({
            start: 0,
            end: 100,
            fadeIn: true,
            duration: 200,
            units: "px",
        }, settingsObj);

        var ease = easeFunction;

        el.style.height = s.start + s.units;
        addClass(el, animatingClass);

        // Animate height at input rate
        el.animation = animate({
            duration: s.duration,
            delta: ease,
            step: function(delta) {
                el.style.height = s.start + ((s.end - s.start) * delta) + s.units;
            },
            finish: function() {
                removeClass(el, animatingClass);
                el.style.removeProperty("height");
                if (typeof s.finish == "function") { s.finish(); }
            },
            interrupt: function() {
                removeClass(el, animatingClass);
                el.style.removeProperty("height");
                if (typeof s.interrupt == "function") { s.interrupt(); }
            }
        });

    } // animateHeight


    /*
     *      Func: animate
     *      Desc: Animate function
     *  Src:  http://javascript.info/tutorial/animation (main animation functions)
     *               http://creativejs.com/resources/requestanimationframe/ (requestAnimationFrame)
     *      Args: @opts - Object - The options object
     *               contains: @duration - Number - Milliseconds for total animation
     *                                    @delta - Function - Easing function
     *                                    @step - Function - Result function (what should happen on screen each frame)
     *                                    @finish - Function - optional- End function (what happens when animation finishes)
     *                                    @interrupt - Function - optional- End function (what happens if animation is interrupted)
     */
    function animate(opts) {

        var start = new Date(); // Get the start time
        var interrupt = false; // If this is true, animation will stop
        var stop = function() { interrupt = true; }; // Stops this animation

        // The render function
        var render = function() {
            var timePassed = new Date() - start; // The amount of time elapsed since start
            var progress = timePassed / opts.duration; // Percentage of time passed in full expected duration

            if (progress > 1) { progress = 1; } // Cap percentage at 1 (100%)

            var delta = opts.delta(progress); // Apply easing function
            opts.step(delta); // Apply the step fuction from the options object (renders a change on screen)

            // Interrupt, continue, or finish depending on progress
            if (interrupt && opts.interrupt) {
                opts.interrupt();
            } else if (progress < 1) {
                window.requestAnimationFrame(render);
            } else if (opts.finish) {
                opts.finish();
            }
        };

        // Start the animation
        window.requestAnimationFrame(render);

        return { stop: stop };

    } // animate


    /*
     *      Func: easeInOut
     *      Desc: Easing function
     *      Args: @power - Positive Integer - Math power that specifies easing curve (default 3)
     */
    function easeInOut(power) {
        power = power ? power : 3;
        var delta = function(progress) {
            return Math.pow(progress, power);
        }

        return function(progress) {
            if (progress < .5)
                return delta(2 * progress) / 2
            else
                return (2 - delta(2 * (1 - progress))) / 2
        }
    } // easeInOut


    /*
    *      Func: cubicBezierDefined
    *      Desc: Easing function based on CSS easing: cubic-bezier(0.3, 0, 0.3, 1).
                           yCoordinates generated by running a cubic bezier function (returning X and Y coordinates based on time)
                          and outputting the Y values associated with the X values that fall closest to each hundredth (.01, .02, ...).
                           This allows a quick lookup based on animation progress. Progress (%) * array length is the index of the Y value.
    *      Args: none
    */
    function cubicBezierDefined() {
        var yCoordinates = [0, 0.00006, 0.00024, 0.00054, 0.00097, 0.00153, 0.00221, 0.00303, 0.00398, 0.00506, 0.00629, 0.00765, 0.00916, 0.01081, 0.0126, 0.01455, 0.01664, 0.01889, 0.0213, 0.02386, 0.02658, 0.02946, 0.0325, 0.03571, 0.03908, 0.04262, 0.04632, 0.05019, 0.05423, 0.05844, 0.06283, 0.06738, 0.0721, 0.07699, 0.08206, 0.0873, 0.0927, 0.09827, 0.104, 0.1099, 0.11597, 0.12219, 0.12857, 0.1351, 0.14179, 0.14861, 0.15559, 0.16271, 0.16995, 0.17734, 0.18484, 0.19247, 0.20021, 0.20805, 0.216, 0.22405, 0.23219, 0.24041, 0.24871, 0.25708, 0.26552, 0.27401, 0.28256, 0.29114, 0.29978, 0.30844, 0.31712, 0.32583, 0.33455, 0.34328, 0.352, 0.36073, 0.36945, 0.37815, 0.38682, 0.39548, 0.40411, 0.41269, 0.42126, 0.42977, 0.43824, 0.44666, 0.45502, 0.46334, 0.4716, 0.4798, 0.48793, 0.496, 0.50399, 0.51192, 0.51978, 0.52757, 0.53528, 0.54293, 0.55049, 0.55796, 0.56538, 0.5727, 0.57996, 0.58713, 0.59421, 0.60122, 0.60815, 0.615, 0.62175, 0.62844, 0.63504, 0.64157, 0.648, 0.65437, 0.66064, 0.66684, 0.67296, 0.679, 0.68496, 0.69084, 0.69665, 0.70238, 0.70803, 0.7136, 0.71911, 0.72452, 0.72988, 0.73515, 0.74036, 0.74549, 0.75054, 0.75554, 0.76045, 0.7653, 0.77007, 0.77479, 0.77942, 0.784, 0.78851, 0.79295, 0.79733, 0.80163, 0.80589, 0.81007, 0.81419, 0.81825, 0.82225, 0.82619, 0.83007, 0.83388, 0.83765, 0.84135, 0.845, 0.84858, 0.85211, 0.85559, 0.85902, 0.86239, 0.8657, 0.86895, 0.87217, 0.87532, 0.87842, 0.88149, 0.88448, 0.88743, 0.89034, 0.89319, 0.896, 0.89876, 0.90147, 0.90414, 0.90675, 0.90933, 0.91185, 0.91434, 0.91678, 0.91917, 0.92152, 0.92383, 0.92609, 0.92831, 0.93049, 0.93264, 0.93473, 0.9368, 0.93881, 0.94079, 0.94273, 0.94463, 0.9465, 0.94832, 0.95011, 0.95186, 0.95357, 0.95525, 0.95689, 0.95849, 0.96006, 0.9616, 0.96309, 0.96455, 0.96599, 0.96738, 0.96874, 0.97007, 0.97136, 0.97263, 0.97386, 0.97506, 0.97623, 0.97736, 0.97847, 0.97954, 0.98058, 0.98159, 0.98258, 0.98353, 0.98445, 0.98535, 0.98621, 0.98705, 0.98786, 0.98864, 0.98939, 0.99011, 0.99081, 0.99147, 0.99212, 0.99273, 0.99332, 0.99388, 0.99442, 0.99493, 0.99541, 0.99587, 0.9963, 0.99671, 0.99709, 0.99745, 0.99779, 0.9981, 0.99838, 0.99865, 0.99888, 0.9991, 0.99929, 0.99946, 0.9996, 0.99972, 0.99982, 0.9999, 0.99996, 0.99999, 1];
        var len = yCoordinates.length - 1;

        // Return the easeing function, which returns an eased value (0–1) based on the progress (0–1, i.e 0%-100%)
        return function(progress) {
            var p = Math.round(progress * len);
            return yCoordinates[p];
        }
    }


    /*
     *      Func: getNaturalHeight
     *      Desc: Get the height of an element on the page (before visibly rendering it on the page)
     *      Args: @el - HTML Element - The element to measure
     */
    function getNaturalHeight(el) {
        var wrapper, testDiv, height;

        wrapper = wrapInner(el, "div");
        height = wrapper.offsetHeight;

        unwrap(wrapper);

        return height;
    }





    /*
     *      Func: wrapInner
     *      Desc: Wrap the contents of an element in a new HTML element
     *      Args: @el - HTMLElement - The element whose contents should be wrapped
     *               @wrapper - String - The type of HTML element that should wrap the contents
     */
    function wrapInner(el, wrapper) {
        var wrap = document.createElement(wrapper);

        // Append a wrapper node
        el.appendChild(wrap);

        // Move all children into the wrapper element
        while (el.firstChild && el.firstChild !== wrap) wrap.appendChild(el.firstChild);

        return wrap;
    }

    /*
     *      Func: unwrap
     *      Desc: Unwrap the parent element of the specified DOM element
     *  Src:  https://plainjs.com/javascript/manipulation/unwrap-a-dom-element-35/
     *      Args: @el - HTMLElement - The element to destroy
     */
    function unwrap(el) {
        // get the element's parent node
        var parent = el.parentNode;

        // move all children out of the wrapper element
        while (el.firstChild) parent.insertBefore(el.firstChild, el);

        // remove the empty element
        parent.removeChild(el);
    }



    return {
        animateHeight: animateHeight,
        getNaturalHeight: getNaturalHeight
    }


})();