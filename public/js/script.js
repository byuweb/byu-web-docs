var animate=function(){var n,a,l=(a=(n=[0,6e-5,24e-5,54e-5,97e-5,.00153,.00221,.00303,.00398,.00506,.00629,.00765,.00916,.01081,.0126,.01455,.01664,.01889,.0213,.02386,.02658,.02946,.0325,.03571,.03908,.04262,.04632,.05019,.05423,.05844,.06283,.06738,.0721,.07699,.08206,.0873,.0927,.09827,.104,.1099,.11597,.12219,.12857,.1351,.14179,.14861,.15559,.16271,.16995,.17734,.18484,.19247,.20021,.20805,.216,.22405,.23219,.24041,.24871,.25708,.26552,.27401,.28256,.29114,.29978,.30844,.31712,.32583,.33455,.34328,.352,.36073,.36945,.37815,.38682,.39548,.40411,.41269,.42126,.42977,.43824,.44666,.45502,.46334,.4716,.4798,.48793,.496,.50399,.51192,.51978,.52757,.53528,.54293,.55049,.55796,.56538,.5727,.57996,.58713,.59421,.60122,.60815,.615,.62175,.62844,.63504,.64157,.648,.65437,.66064,.66684,.67296,.679,.68496,.69084,.69665,.70238,.70803,.7136,.71911,.72452,.72988,.73515,.74036,.74549,.75054,.75554,.76045,.7653,.77007,.77479,.77942,.784,.78851,.79295,.79733,.80163,.80589,.81007,.81419,.81825,.82225,.82619,.83007,.83388,.83765,.84135,.845,.84858,.85211,.85559,.85902,.86239,.8657,.86895,.87217,.87532,.87842,.88149,.88448,.88743,.89034,.89319,.896,.89876,.90147,.90414,.90675,.90933,.91185,.91434,.91678,.91917,.92152,.92383,.92609,.92831,.93049,.93264,.93473,.9368,.93881,.94079,.94273,.94463,.9465,.94832,.95011,.95186,.95357,.95525,.95689,.95849,.96006,.9616,.96309,.96455,.96599,.96738,.96874,.97007,.97136,.97263,.97386,.97506,.97623,.97736,.97847,.97954,.98058,.98159,.98258,.98353,.98445,.98535,.98621,.98705,.98786,.98864,.98939,.99011,.99081,.99147,.99212,.99273,.99332,.99388,.99442,.99493,.99541,.99587,.9963,.99671,.99709,.99745,.99779,.9981,.99838,.99865,.99888,.9991,.99929,.99946,.9996,.99972,.99982,.9999,.99996,.99999,1]).length-1,function(e){var t=Math.round(e*a);return n[t]}),u="animating";return{animateHeight:function(t,e){var a,s,i,r,n=Object.assign({start:0,end:100,fadeIn:!0,duration:200,units:"px"},e),o=l;t.style.height=n.start+n.units,addClass(t,u),t.animation=(a={duration:n.duration,delta:o,step:function(e){t.style.height=n.start+(n.end-n.start)*e+n.units},finish:function(){removeClass(t,u),t.style.removeProperty("height"),"function"==typeof n.finish&&n.finish()},interrupt:function(){removeClass(t,u),t.style.removeProperty("height"),"function"==typeof n.interrupt&&n.interrupt()}},s=new Date,i=!1,r=function(){var e=new Date-s,t=e/a.duration;1<t&&(t=1);var n=a.delta(t);a.step(n),i&&a.interrupt?a.interrupt():t<1?window.requestAnimationFrame(r):a.finish&&a.finish()},window.requestAnimationFrame(r),{stop:function(){i=!0}})},getNaturalHeight:function(e){var t,n;return n=(t=function(e,t){var n=document.createElement(t);for(e.appendChild(n);e.firstChild&&e.firstChild!==n;)n.appendChild(e.firstChild);return n}(e,"div")).offsetHeight,function(e){for(var t=e.parentNode;e.firstChild;)t.insertBefore(e.firstChild,e);t.removeChild(e)}(t),n}}}(),byu_main=function(){var t=document;function s(e,t){return 0<t.getElementsByClassName(e).length}return HTMLElement.prototype.hasClass=function(e){return this.className.match(new RegExp("(\\s|^)"+e+"(\\s|$)"))},HTMLElement.prototype.addClass=function(e){for(var t=e.split(","),n=0;n<t.length;n++)-1==(" "+this.className+" ").indexOf(" "+t[n]+" ")&&(this.className+=" "+t[n]);return this},HTMLElement.prototype.removeClass=function(e){if(this.hasClass(e)){var t=new RegExp("(\\s|^)"+e+"(\\s|$)"),n=new RegExp("(\\s|^)"+e);this.className.search(t)&&(this.className=this.className.replace(n,""))}return this},{executeOnLoad:function(e){"loading"!=t.readyState?e():t.addEventListener?t.addEventListener("DOMContentLoaded",e):t.attachEvent("onreadystatechange",function(){"complete"==t.readyState&&e()})},elExists:s,hasChildren:function(e,t){var n,a=!1;return s(e,t)&&(n=t.getElementsByClassName(e),Array.prototype.forEach.call(n,function(e){0<e.children.length&&(a=!0)})),a}}}(),byu_header=function(){"use strict";var t=document,n="js-enabled",r="aria-expanded",o="menu-open";byu_main.executeOnLoad(function(){var e=t.getElementsByClassName("byu-header");Array.prototype.forEach.call(e,function(e){var t,i;t=e,(byu_main.elExists("byu-site-navigation",t)||byu_main.hasChildren("byu-action-id-search",t))&&(t.addClass(n),(i=t).getElementsByClassName("byu-menu-button")[0].addEventListener("click",function(e){var t,n,a,s;t=e.target,n=i,"false"!=t.getAttribute(r)?(a=n,t.setAttribute(r,!1),a.removeClass(o)):(s=n,t.setAttribute(r,!0),s.hasClass(o)||s.addClass(o))}))})})}(),byu_table=function(){"use strict";var a=document;function s(e){var t=e.offsetWidth,n=e.getElementsByTagName("table")[0],a=n.offsetWidth,s="table-wide",i="start-visible",r="end-visible";t<a?(e.hasClass(s)||e.addClass(s),0==n.scrollLeft?e.hasClass(i)||e.addClass(i):e.removeClass(i),a-n.scrollLeft==t?e.hasClass(r)||e.addClass(r):e.removeClass(r)):e.removeClass(s)}byu_main.executeOnLoad(function(){for(var e=a.getElementsByClassName("table-container"),t=0;t<e.length;t++){var n=e[t];s(n)}})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
